package org.jkiss.dbeaver.model.sourcecode.template;

import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.jkiss.dbeaver.model.sourcecode.core.SourceCodeJavaClass;
import org.jkiss.dbeaver.model.sourcecode.core.SourceCodeTableColumn;


public class TemplateManager {
	
	private  Map<String,Object> templateData;
	private HashSet<String> tplExpSet;

	public void process(  final IEngineContext context,TemplateSpec templateSpec, final Writer writer) 
	{
		
		this.templateData=new HashMap<String, Object>();
		tplExpSet=new HashSet<String>();
		StandardDialect dialect=new StandardDialect();
		dialect.execTemplate(context,templateSpec,writer);
	}
	 
	
	 public static void main(String[] args)
	 {
		 try {
			 String template=null;
			 String result=null;
			 System.out.println("=====test ========");
			 testKVP();
			 
			 // value
			  {
				 template="Discover interesting projects and people to populate your personal news feed."
				 		+ " @@${hello}@@ Your news feed helps you keep up with recent activity "
				 		+ " @@#each{list:columns item:item text:\"private ${item.javaType} ${item.lowerCamelCaseName};\r\n \"}@@ Your news feed helps you keep up with recent activity "
				 		+ "@@@if(a==b){'one model.'}else{'else model.'}@@ feed helps you keep up with recent activity "
				 		+ " @@#bools.isTrue(entity.name == 'SysUserDo')?'aa':'bsdfasdfansdfasdfb'@@ on repositories you watch and people you follow."
				 		+ " @@#list:colums;item:column;file:java_entity_item;@@ Repositor";
			
				  
				 
				 TemplateContext context=new TemplateContext();
				 context.setVariable("tableName", "sys_user");
				 context.setVariable("hello", "Hello world!");
				 context.setVariable("tableCodeName", "SysUser");
				 context.setVariable("tableParamName", "sysUser");
				 List<SourceCodeTableColumn> columns=new ArrayList<SourceCodeTableColumn>();
				 {
					 SourceCodeTableColumn column=new SourceCodeTableColumn();
					 column.setColumnName("id");
					 column.setDesciption("主健");
					 column.setIsPrimary(true);
					 column.setJavaType("Long");
					 column.setIsAutoGenerated(true);
					 column.setIsRequired(true);
					 column.setLowerCamelCaseName("id");
					 column.setUpperCamelCaseName("Id");
					 columns.add(column);
				 }
				 {
					 SourceCodeTableColumn column=new SourceCodeTableColumn();
					 column.setColumnName("name");
					 column.setDesciption("名称");
					 column.setIsPrimary(false);
					 column.setJavaType("String");
					 column.setIsAutoGenerated(false);
					 column.setIsRequired(true);
					 column.setLowerCamelCaseName("name");
					 column.setUpperCamelCaseName("Name");
					 columns.add(column);
				 }
				 context.setVariable("columns", columns);
				 result=TemplateEngine.process(template, context);
			 }
			 
			 System.out.println("[RESULT]\r\n "+result);
			 
			    System.out.println("=====Over ========");
			 
		 }catch (Exception e) {
			 e.printStackTrace();
		}
	 }
	 
	 
	 private static void testKVP()
	 {
		 String INPUT = "list= yes  item=  no key=\"value\"  withEqualsSign=\"Base64==\"  isEmpty=\"\"  withSpaces=\" s p a c e s \" withEscapeChar=\"aaa\\\\bbb\" withEscapeChar2=\"aaa\\\"bbb\" withEscapeChar3=\"aaa\\]bbb\"";
		 String INPUT2 = "list: yes  item:  no key=\"value\"  withEqualsSign:\"Base64==\"  isEmpty:\"\"  withSpaces:\" s p a c e s \" withEscapeChar:\"aaa\\\\bbb\" withEscapeChar2:\"aaa\\\"bbb\" withEscapeChar3:\"aaa\\]bbb\"";
		  List<Map.Entry<String, String>> collect = KeyValueReaderIterable.stream(INPUT2,':').collect(Collectors.toList());
		for(int i=0,k=collect.size();i<k;i++)
		{
			Map.Entry<String, String> item=collect.get(i);
			System.out.println("KEY:"+item.getKey());
			System.out.println("VALUE:"+item.getValue());
		}
	 }
	 
}
